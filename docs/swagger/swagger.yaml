openapi: 3.0.0
info:
  title: OpenAPI documentations
  description: OpenAPIdoc for <a href="https://github.com/Ukrsoftdev/news-manager-api"><big>News Manager API</big></a> application
  version: 1.0-beta
servers:
  - url: https://ukrsoftdev.github.io/news-manager-api/swagger/responses
    description: Server from the GitHub repository
  - url: http://localhost:8002/api
    description: Local Docker Server
paths:
  /organization/list:
    get:
      tags: [ Organization ]
      summary: Organizations list
      description: Returns a list of Organizations with data that need authorization.
      responses:
        200:
          description: A JSON array of Organizations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organizations'
        404:
          $ref: '#/components/responses/NotFound'

  /auth/login:
    post:
      tags: [ Auth ]
      summary: Auth login
      description: Send request with login and password data and get token from response.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'justine66@kassulke.com'
                password:
                  type: string
                  example: 'password'
              required:
                - email
                - password
      responses:
        200:
          description: Return authorization data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalAccessToken'
        404:
          $ref: '#/components/responses/NotFound'
        422:
          $ref: '#/components/responses/UnprocessableContent'

  /news/list:
    get:
      tags: [ News ]
      summary: News list
      description: List of News records for a authorized Organization
      security:
        - sanctumAuth: [ ]
      responses:
        200:
          description: A JSON array of News
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/News'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  /news/{id}:
    parameters:
      - $ref: '#/components/parameters/NewsIdParam'
    get:
      tags: [ News ]
      summary: News show
      description: Show a specific News
      security:
        - sanctumAuth: [ ]
      responses:
        200:
          description: Return object News
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
    put:
      tags: [ News ]
      summary: News replace
      description: Replace all data in a specific News
      security:
        - sanctumAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                news_title:
                  type: string
                  example: 'New News title'
                news_start_date:
                  type: string
                  example: '2023-08-18 09:04:38'
                news_end_date:
                  type: string
                  example: '2023-08-18 12:45:52'
              required:
                - news_title
                - news_start_date
                - news_end_date
      responses:
        204:
          description: No content
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        422:
          $ref: '#/components/responses/UnprocessableContent'
    patch:
      tags: [ News ]
      summary: News update
      description: Update one or more columns in a specific News
      security:
        - sanctumAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                news_title:
                  type: string
                  example: 'New News title'
                news_start_date:
                  type: string
                  example: '2023-08-18 09:04:38'
                news_end_date:
                  type: string
                  example: '2023-08-18 12:45:52'
      responses:
        204:
          description: No content
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        422:
          $ref: '#/components/responses/UnprocessableContent'
    delete:
      tags: [ News ]
      summary: News delete
      description: Delete a specific News
      security:
        - sanctumAuth: [ ]
      responses:
        204:
          description: No content
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    sanctumAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Organizations:
      type: object
      properties:
        OrganizationId:
          type: integer
          example: 12447
        OrganizationName:
          type: string
          example: 'Ward-West'
        email:
          type: string
          example: 'mueller.elaina@pfannerstill.net'
        password:
          type: string
          example: 'password'
        countNews:
          type: integer
          example: 7
    PersonalAccessToken:
      type: object
      properties:
        accessToken:
          type: object
          properties:
            name:
              type: string
              example: dgoyette@kunze.com
            abilities:
              type: array
              items:
                type: string
                example: '*'
            expires_at:
              type: string
              example: null
            tokenable_id:
              type: integer
              example: 1
            tokenable_type:
              type: string
              example: 'App\\Models\\Organization'
            updated_at:
              type: string
              example: '2023-07-27T13:20:42.000000Z'
            created_at:
              type: string
              example: '2023-07-27T13:20:42.000000Z'
            id:
              type: integer
              example: 191
        plainTextToken:
          type: string
          example: '200|wiKjGfpPMYGD8qkBvZJLVcoRsychMEgTGoNm5iIG'
    News:
      type: object
      properties:
        id:
          type: integer
          example: 76
        news_title:
          type: string
          example: 'Fuga sequi aliquid voluptatem iusto esse beatae.'
        news_start_date:
          type: string
          example: '2024-05-25 03:35:49'
        news_end_date:
          type: string
          example: '2024-05-25 07:09:50'
        organization_id:
          type: integer
          example: 6
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
        errors:
          oneOf:
            - type: object
            - type: string

  parameters:
    NewsIdParam:
      name: id
      in: path
      description: Numeric ID of the News
      required: true
      schema:
        type: integer
        example: 1

  responses:
    Unauthorized:
      description: Unauthorized request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: '{
                      "message": "Unauthenticated",
                      "errors": "Unauthenticated"
                    }'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: '{
                      "message": "Record not found",
                      "errors": "No query results for model [App\\Models\\News] 78"
                    }'
    UnprocessableContent:
      description: Unprocessable Content
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: '{
                        "message": "The value news_end_date can`t be before the news_start_date",
                        "errors": {
                            "news_end_date": [
                                "The value news_end_date can`t be before the news_start_date"
                            ]
                        }
                    }'
